# tests/test_twitter_integration.py

import pytest
from unittest.mock import MagicMock, patch
from src.prodigal_automation.twitter_manager import TwitterManager
from src.prodigal_automation.tools import ContentGenerator
from src.prodigal_automation.auth import TwitterAuth

@pytest.fixture
def mock_twitter_api():
    """Fixture to mock the Tweepy API client for integration tests."""
    mock_api = MagicMock()
    mock_api.create_tweet.return_value = MagicMock(id='1234567890')
    return mock_api

@pytest.fixture
def mock_content_generator():
    """Fixture to mock the ContentGenerator for integration tests."""
    mock_generator = MagicMock(spec=ContentGenerator)
    # Mock the correct method name that TwitterManager actually calls
    mock_generator.generate_simple_content.return_value = "This is a test tweet content generated by the mock."
    return mock_generator

def test_create_tweet_integration(mock_twitter_api, mock_content_generator):
    """Integration test for create_tweet method, simulating interaction with Twitter API and ContentGenerator."""

    # Initialize TwitterManager with the mock client and generator
    twitter_manager = TwitterManager(mock_twitter_api, mock_content_generator)

    # Call the method under test
    tweet_id = twitter_manager.create_tweet("test_prompt")

    # Assertions - Use the correct method name
    mock_content_generator.generate_simple_content.assert_called_once_with("test_prompt")
    mock_twitter_api.create_tweet.assert_called_once_with(
        text="This is a test tweet content generated by the mock."
    )
    assert tweet_id == '1234567890'